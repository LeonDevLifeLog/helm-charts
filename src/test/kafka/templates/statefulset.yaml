apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka.fullname" . }}
  labels:
    main.kubesphere.io/name: {{ include "kafka.name" . }}
    {{- include "kafka.labels" . | nindent 4 }}
  annotations: {{- include "kafka.tplValue" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "kafka.fullname" . }}-headless
  selector:
    matchLabels:
      main.kubesphere.io/name: {{ include "kafka.name" . }}
      {{- include "kafka.selectorLabels" . | nindent 6 }}
  updateStrategy:
    type: {{ .Values.updateStrategy | quote }}
    {{- if (eq "OnDelete" .Values.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.rollingUpdatePartition }}
    {{- end }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        main.kubesphere.io/name: {{ include "kafka.name" . }}
        {{- include "kafka.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kafka.serviceAccountName" . }}
      {{- if .Values.affinity }}
      affinity: {{- include "kafka.tplValue" ( dict "value" .Values.affinity "context" $ ) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "kafka.tplValue" ( dict "value" .Values.nodeSelector "context" $ ) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "kafka.tplValue" ( dict "value" .Values.tolerations "context" $ ) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if or .Values.persistence.enabled .Values.persistence.existingClaim }}
      initContainers:
        - name: volume-permissions
          image: busybox:1.32
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - /bin/sh
          args:
            - -ec
            - |
              mkdir -p /data/kafka/topic_data /data/kafka/logs
              chown -R "1000:1000" "/data/kafka"
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: {{ include "kafka.fullname" . }}-data
              mountPath: /data/kafka
      {{- end }}
      containers:
        - name: kafka
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ with .Values.image.registry }}{{ toYaml . }}/{{ end }}{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: {{ if not .Values.zookeeper.enabled }}{{ .Values.zookeeper.externalZk | quote }}{{ else }}{{ .Release.Name }}-zookeeper-0.{{ .Release.Name }}-zookeeper-headless.{{ .Release.Namespace }}.svc.cluster.local:2181/kafka/{{ .Release.Name }}{{ end }}
            - name: KAFKA_NUM_PARTITIONS
              value: {{ .Values.cfg.num_partitions | quote }}
            - name: KAFKA_NUM_NETWORK_THREADS
              value: {{ .Values.cfg.num_network_threads | quote }}
            - name: KAFKA_NUM_IO_THREADS
              value: {{ .Values.cfg.num_io_threads | quote }}
            - name: KAFKA_SOCKET_SEND_BUFFER_BYTES
              value: {{ .Values.cfg.socket_send_buffer_bytes | quote }}
            - name: KAFKA_SOCKET_RECEIVE_BUFFER_BYTES
              value: {{ .Values.cfg.socket_receive_buffer_bytes | quote }}
            - name: KAFKA_SOCKET_REQUEST_MAX_BYTES
              value: {{ .Values.cfg.socket_request_max_bytes | quote }}
            - name: KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: {{ .Values.cfg.num_recovery_threads_per_data_dir | quote }}
            - name: KAFKA_OFFSETS_TOPIC_REPLIACATION_FACTOR
              value: {{ .Values.cfg.offsets_topic_replication_factor | quote }}
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: {{ .Values.cfg.transaction_state_log_replication_factor | quote }}
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: {{ .Values.cfg.transaction_state_log_min_isr | quote }}
            - name: KAFKA_LOG_FLUSH_INTERVAL_MESSAGES
              value: {{ .Values.cfg.log_flush_interval_messages | quote }}
            - name: KAFKA_LOG_FLUSH_INTERVAL_MS
              value: {{ .Values.cfg.log_flush_interval_ms | quote }}
            - name: KAFKA_LOG_RETENTION_HOURS
              value: {{ .Values.cfg.log_retention_hours | quote }}
            - name: KAFKA_LOG_RETENTION_BYTES
              value: {{ .Values.cfg.log_retention_bytes | quote }}
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: {{ .Values.cfg.log_segment_bytes | quote }}
            - name: KAFKA_LOG_RETENSION_CHECK_INTERVAL_MS
              value: {{ .Values.cfg.log_retention_check_interval_ms| quote }}
            - name: KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: {{ .Values.cfg.zookeeper_connection_timeout_ms | quote }}
            - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              value: {{ .Values.cfg.group_initial_rebalance_delay_ms | quote }}
            - name: KAFKA_REPLICA_LAG_TIME_MAX_MS
              value: {{ .Values.cfg.replica_lag_time_max_ms | quote }}
            - name: KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS
              value: {{ .Values.cfg.group_max_session_timeout_ms | quote }}
            - name: KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS
              value: {{ .Values.cfg.group_min_session_timeout_ms | quote }}
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: {{ .Values.cfg.auto_create_topics_enable | quote }}
            - name: KAFKA_COMPRESSION_TYPE
              value: {{ .Values.cfg.compression_type | quote }}
            - name: KAFKA_LOG_CLEAN_POLICY
              value: {{ .Values.cfg.log_cleanup_policy | quote }}
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: {{ .Values.cfg.default_replication_factor | quote }}
            - name: KAFKA_DELETE_TOPIC_ENABLE
              value: {{ .Values.cfg.delete_topic_enable | quote }}
            - name: KAFKA_LOG_CLEANER_ENABLE
              value: {{ .Values.cfg.log_cleaner_enable | quote }}
            - name: KAFKA_LOG_ROLL_HOURS
              value: {{ .Values.cfg.log_roll_hours | quote }}
            - name: KAFKA_MESSAGE_MAX_BYTES
              value: {{ .Values.cfg.message_max_bytes | quote }}
            - name: KAFKA_NUM_REPLICATION_FACTORS
              value: {{ .Values.cfg.num_replica_fetchers | quote }}
            - name: KAFKA_QUEUED_MAX_REQUESTS
              value: {{ .Values.cfg.queued_max_requests | quote }}
            - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE
              value: {{ .Values.cfg.unclean_leader_election_enable | quote }}
            - name: KAFKA_HEAP_OPTS
              value: {{ .Values.heapOpts | quote }}
            - name: KAFKA_EXTERNAL_ACCESS
              value: {{ .Values.externalAccess.enabled | quote }}
            - name: JMX_PORT
              value: {{ .Values.jmx.port | quote }}
          ports:
            - name: kfk-internal
              containerPort: 9092
            {{- if .Values.externalAccess.enabled }}
            - name: kfk-external
              containerPort: 9093
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: kfk-internal
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: kfk-internal
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: {{ include "kafka.fullname" . }}-data
              mountPath: /data/kafka
      volumes:
{{- if not .Values.persistence.enabled }}
        - name: {{ include "kafka.fullname" . }}-data
          emptyDir: {}
{{- else if .Values.persistence.existingClaim }}
        - name: {{ include "kafka.fullname" . }}-data
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl .Values.persistence.existingClaim .) }}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "kafka.fullname" . }}-data
        {{- if .Values.persistence.annotations }}
        annotations: {{- include "kafka.tplValue" (dict "value" .Values.persistence.annotations "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
{{- end }}